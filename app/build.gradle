apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'me.tatarka.retrolambda'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    maven { url "https://dl.bintray.com/thelasterstar/maven/" }
}


buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://maven.google.com' }
        maven { url 'https://maven.fabric.io/public' }
        maven { url "https://dl.bintray.com/thelasterstar/maven/" }
    }

    dependencies {
        classpath "me.tatarka:gradle-retrolambda:$tatarka_version"
        classpath "io.fabric.tools:gradle:$fabric_version"
    }
}

android {
    tasks.whenTaskAdded { task ->
        if (task.name.contains("lint")//如果instant run不生效，把clean这行干掉
                || task.name.equals("clean")//项目中有用到aidl则不可以舍弃这个任务
                || task.name.contains("Aidl")//用不到测试的时候就可以先关闭
                || task.name.contains("mockableAndroidJar")
                || task.name.contains("UnitTest")
                || task.name.contains("AndroidTest")//用不到NDK和JNI的也关闭掉
                || task.name.contains("Ndk")
                || task.name.contains("Jni")
        ) {
            task.enabled = false
        }
    }

    signingConfigs {
        debug {
            storeFile file('./debug.keystore')
        }
    }

    publishNonDefault true


    compileSdkVersion rootProject.COMPILE_SDK_VERSION
    buildToolsVersion rootProject.ANDROID_BUILD_TOOLS_VERSION

    lintOptions {
        abortOnError false
    }

    // For retrolambda
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.1'
    }
    defaultConfig {
        applicationId "org.ditto.inappkeyboard"
        minSdkVersion rootProject.MIN_SDK_VERSION
        targetSdkVersion rootProject.TARGET_SDK_VERSION
        versionCode 1
        versionName "1.0"
        signingConfig signingConfigs.debug
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        // Enable MultiDexing:  https://developer.android.com/tools/building/multidex.html
        multiDexEnabled true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }

        ndk { //设置支持的SO库架构（开发者可以根据需要，选择一个或多个平台的so）
            abiFilters "armeabi", "armeabi-v7a", "arm64-v8a", "x86", "arm64-v8a", "x86_64"
        }

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
            buildConfigField 'String', 'ENVIRONMENT', '"PRODUCTION"'
            buildConfigField "boolean", "USE_CRASHLYTICS", "true"
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
            buildConfigField 'String', 'AMAPKEY', '"4d83adc4a7dea5315096f8629a8c9a02"'
            buildConfigField 'String', 'ENVIRONMENT', '"DEBUG"'
            buildConfigField "boolean", "USE_CRASHLYTICS", "true"
            ext.alwaysUpdateBuildId = false
        }
    }
    productFlavors {
/*
        //https://blog.synyx.de/2016/08/android-building-apks-for-different-environments-using-build-types-and-product-flavors/
        local {
            debuggable true
            signingConfig signingConfigs.debug
            applicationIdSuffix ".local"
            buildConfigField 'String', 'ENVIRONMENT', '"LOCAL"'
            buildConfigField 'String', 'SYNC_GATEWAY_URL', '"http://127.0.0.1:4984/sync_gateway/"'
        }

        dev { // build types may not start with 'test'
            debuggable true
            signingConfig signingConfigs.debug
            applicationIdSuffix ".dev"
            buildConfigField 'String', 'ENVIRONMENT', '"DEV"'
            buildConfigField 'String', 'SYNC_GATEWAY_URL', '"http://10.9.42.203:4984/hiask/"'
        }

        qa {
            debuggable true
            signingConfig signingConfigs.debug
            applicationIdSuffix ".qa"
            buildConfigField 'String', 'ENVIRONMENT', '"QA"'
            buildConfigField 'String', 'SYNC_GATEWAY_URL', '"http://10.9.42.203:4984/hiask/"'
        }
        prod {
            debuggable true
            signingConfig signingConfigs.debug
            applicationIdSuffix ".prod"
            buildConfigField 'String', 'ENVIRONMENT', '"QA"'
            buildConfigField 'String', 'SYNC_GATEWAY_URL', '"http://10.9.42.203:4984/hiask/"'
        }
*/
    }

    dexOptions {
        javaMaxHeapSize "2048M"
        preDexLibraries = false
    }//end dexOptions

    dataBinding {
        enabled = false
    }

    // workaround for "duplicate files during packaging of APK" issue:
    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/services/javax.annotation.processing.Processor' // butterknife
    }
}

project.android.buildTypes.all { buildType ->
    buildType.javaCompileOptions.annotationProcessorOptions.arguments =
            [
                    validateEpoxyModelUsage     : String.valueOf(buildType.name == 'debug'),
                    requireHashCodeInEpoxyModels: "true",
                    requireAbstractEpoxyModels  : "true"
            ]
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })


    debugCompile project(path: ':keyboard', configuration: 'debug')
    releaseCompile project(path: ':keyboard', configuration: 'release')


    compile "com.android.support:appcompat-v7:$ANDROID_SUPPORT_LIBS_VERSION"
    compile "com.android.support:support-v13:$ANDROID_SUPPORT_LIBS_VERSION"
    compile "com.android.support.constraint:constraint-layout:$constraint_layout_version"
    compile "com.android.support:support-v4:$ANDROID_SUPPORT_LIBS_VERSION"

    compile 'com.github.anrwatchdog:anrwatchdog:1.3.0'
    compile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true;
    }

    testCompile 'junit:junit:4.12'
}